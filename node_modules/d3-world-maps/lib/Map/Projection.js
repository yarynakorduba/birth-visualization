'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _d3 = require('d3');

var _d32 = _interopRequireDefault(_d3);

/**
 * @class
 */

var Projection = (function () {
  /**
   * @constructor
   */

  function Projection(group, prjFnc, svg) {
    _classCallCheck(this, Projection);

    if (!group) {
      throw new Error('group is a required argument.');
    }

    this.height = parseFloat(svg.style('height').replace(/px/, ''));
    this.width = parseFloat(svg.style('width').replace(/px/, ''));
    this.svg = svg;
    this.group = group;
    this.paths = this.group.selectAll('path');
    this.prjFnc = prjFnc.translate([this.width / 2, this.height / 2]);
    this.pathGenerator = _d32['default'].geo.path();
    this.zoom = _d32['default'].behavior.zoom();
    this.extent = [[0, 0], [this.width, this.height]];
    this.init();
  }

  /**
   * Initializes the projection
   * @Method
   */

  _createClass(Projection, [{
    key: 'init',
    value: function init() {
      this.zoom.on('zoom', this.onZoom.bind(this));
      this.zoom.on('zoomstart', this.onZoomStart.bind(this));

      this.svg.call(this.zoom).on('mousewheel.zoom', null).on('DOMMouseScroll.zoom', null).on('mousemove.zoom', null).on('wheel.zoom', null).on('MozMousePixelScroll.zoom', null).on('dblclick.zoom', null);
      this.pathGenerator.projection(this.prjFnc);
    }

    /**
     * Updates collection of Path elements when new element is added
     * @Method
     */
  }, {
    key: 'collectPaths',
    value: function collectPaths() {
      this.paths = this.group.selectAll('path');
    }

    /**
     * Updates d attributes of Path elements
     * @Method
     */
  }, {
    key: 'redraw',
    value: function redraw() {
      this.paths.attr('d', this.pathGenerator.pointRadius(function (d) {
        return d.radius;
      }));
    }
  }]);

  return Projection;
})();

exports['default'] = Projection;
module.exports = exports['default'];